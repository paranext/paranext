name: Publish
run-name: Publish release v${{ github.event.inputs.version }} on ${{ github.head_ref || github.ref_name }}

# Make sure these match with the matrix.os values below
env:
  OS_WINDOWS: windows-latest
  OS_MACOS: macos-14
  # The Ubuntu version must align with the "core" version in electron-builder.json5 in paranext-core
  OS_LINUX: ubuntu-22.04

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish. For verification purposes only; if the package.json version is different on the specified branch, the workflow will fail.'
        required: true
      newVersionAfterPublishing:
        description: "Version to bump all the repo's versions to on a new branch (called `bump-versions-<version>`) after making a new release, e.g. 0.3.0-alpha.0. If empty, will not bump the versions."
        required: false
      bumpRef:
        description: 'Git ref to create the new `bump-versions-<version>` branch from. If empty, will use the current branch.'
        required: false
      uploadReleaseAssets:
        description: 'Upload the release assets to the configured S3 bucket.'
        type: boolean
        required: false
        default: false
      debug_enabled:
        type: boolean
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false

jobs:
  publish:
    name: Release on ${{ matrix.os }}, .Net ${{ matrix.dotnet_version }}

    runs-on: ${{ matrix.os }}

    permissions:
      contents: write

    strategy:
      matrix:
        # Make sure these match with the env values above
        os: [windows-latest, macos-14, ubuntu-22.04]
        dotnet_version: [8.0.x]

    steps:
      - name: Output Workflow Dispatch Inputs
        run: echo "${{ toJSON(github.event.inputs) }}"

      - name: Install MacPorts
        if: ${{ matrix.os == env.OS_MACOS }}
        uses: melusina-org/setup-macports@v1

      - name: Update MacPorts ports tree
        if: ${{ matrix.os == env.OS_MACOS }}
        # Not using `-v` for verbose because it is very slow and does not add much value
        run: |
          sudo port sync

      - name: Install loader tools on macOS
        if: ${{ matrix.os == env.OS_MACOS }}
        run: |
          sudo port -v install ld64

      - name: Install icu4c on macOS
        if: ${{ matrix.os == env.OS_MACOS }}
        run: |
          sudo port -v install icu @76.1_0 +universal

      - name: Fixup loader paths for icu4c
        if: ${{ matrix.os == env.OS_MACOS }}
        # LIB_DEPENDENCIES are of the form "<ICU lib short name> <dependency as ICU lib short name>"
        # For example, libicuuc (shortened to "uc") depends on libicudata (shortened to "data")
        # Dependencies can be seen by running "dyld_info -dependents /path/to/something.dylib"
        run: |
          ICU_VERSION=76
          LIB_DEPENDENCIES="
          i18n data
          i18n uc
          io data
          io i18n
          io uc
          uc data
          "
          LIB_DEPENDENCIES=$(echo "$LIB_DEPENDENCIES" | sed '/^$/d')
          while IFS= read -r line; do
            set -- $line
            sudo install_name_tool -change "/opt/local/lib/libicu$2.$ICU_VERSION.dylib" "@loader_path/libicu$2.$ICU_VERSION.dylib" "/opt/local/lib/libicu$1.$ICU_VERSION.dylib"
          done <<< "$LIB_DEPENDENCIES"

      # Thanks to wogsland at https://stackoverflow.com/a/60548651
      - name: Configure git access token (read private repos)
        env:
          TOKEN: ${{ secrets.READ_REPOS_TOKEN }}
        if: ${{ env.TOKEN != '' }}
        run: git config --global url."https://${{ env.TOKEN }}@github.com/".insteadOf "https://github.com/"

      # Need to preserve the files' line endings exactly to be able to apply patches on Windows.
      - name: Prevent git from changing line endings to CRLF in Windows
        if: ${{ matrix.os == env.OS_WINDOWS }}
        run: git config --global core.autocrlf false

      - name: Install snap tools on Linux
        if: ${{ matrix.os == env.OS_LINUX }}
        run: |
          sudo apt update
          sudo apt install -y snapd
          sudo snap install snapcraft --classic
          sudo snap install lxd
          sudo snap refresh lxd
          sudo lxd init --auto
          # Add the current user to the lxd group
          getent group lxd | grep -qwF "$USER" || sudo usermod -aG lxd "$USER"
          newgrp lxd
          # Force the socket to be usable by the current user
          sudo chmod 666 /var/snap/lxd/common/lxd/unix.socket
          # https://github.com/canonical/action-build/blob/master/src/tools.ts#L54
          sudo iptables -P FORWARD ACCEPT

      - name: Checkout git repo
        uses: actions/checkout@v4

      - name: Install .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet_version }}

      - name: Read package.json
        id: package_json
        uses: zoexx/github-action-json-file-properties@1.0.6
        with:
          file_path: 'package.json'

      - name: Verify version (skips if versions match)
        if: '${{ inputs.version != steps.package_json.outputs.version }}'
        run: |
          echo "Version mismatch! Expected ${{ inputs.version }} but found ${{ steps.package_json.outputs.version }}"
          exit 1

      - name: Install Node and NPM
        uses: actions/setup-node@v4
        with:
          node-version: ${{ fromJson(steps.package_json.outputs.volta).node }}
          cache: npm

      - name: Install
        run: |
          npm install

      - name: Prepare release - Windows
        if: ${{ matrix.os == env.OS_WINDOWS }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm run build-ci
          mkdir temp-build\\paranext-core\\release\\staged
          move temp-build\\paranext-core\\release\\build\\*Setup*.exe temp-build\\paranext-core\\release\\staged

      # If you need to sign Windows installers, enter the necessary secrets and uncomment this block
      # - name: Code signing - Windows
      # if: ${{ matrix.os == env.OS_WINDOWS }}
      # See https://github.com/cognitedata/code-sign-action/blob/main/README.md for descriptions
      # env:
      #   CERTIFICATE_HOST: ${{ secrets.WIN_CODE_SIGNING_CERT_HOST }}
      #   CERTIFICATE_HOST_API_KEY: ${{ secrets.WIN_CODE_SIGNING_CERT_HOST_API_KEY }}
      #   CERTIFICATE_SHA1_HASH: ${{ secrets.WIN_CERTIFICATE_SHA1_HASH }}
      #   CLIENT_CERTIFICATE: ${{ secrets.WIN_CODE_SIGNING_CLIENT_CERT }}
      #   CLIENT_CERTIFICATE_PASSWORD: ${{ secrets.WIN_CODE_SIGNING_CLIENT_CERT_PASSWORD }}
      #   KEYPAIR_ALIAS: ${{ secrets.WIN_CODE_SIGNING_KEYPAIR_ALIAS }}
      # uses: cognitedata/code-sign-action/@v3
      # with:
      #   path-to-binary: 'temp-build\\paranext-core\\release\\staged'

      - name: Prepare releases - macOS
        if: ${{ matrix.os == env.OS_MACOS }}
        # env:
        # The APPLE_* values are used for auto updates signing
        # APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        # APPLE_ID: ${{ secrets.APPLE_ID }}
        # APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        # CSC_LINK: ${{ secrets.CSC_LINK }}
        # CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
        run: |
          npm run build-ci
          mkdir ./temp-build/paranext-core/release/staged
          mv ./temp-build/paranext-core/release/build/*.dmg ./temp-build/paranext-core/release/staged

      - name: Prepare release and publish to the snap store - Linux
        if: ${{ matrix.os == env.OS_LINUX }}
        env:
          # no hard links so dependencies are copied
          USE_HARD_LINKS: false
          # This is used by electron-builder to prepare the release
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # This is required to upload automatically to the snap store
          # SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.LINUX_SNAP_STORE_CREDENTIALS }}
        # Once snap store credentials are set, add the following line right after `npm run build-ci`
        # snapcraft upload --release=edge ./temp-build/paranext-core/release/build/*.snap
        run: |
          npm run build-ci
          mkdir ./temp-build/paranext-core/release/staged
          mv ./temp-build/paranext-core/release/build/*.snap ./temp-build/paranext-core/release/staged

      - name: Publish draft release
        uses: ncipollo/release-action@v1
        with:
          # Need to allow updates in order to upload artifacts from each OS
          allowUpdates: true
          artifactErrorsFailBuild: true
          artifacts: |
            temp-build/paranext-core/release/staged/*
          bodyFile: .github/assets/release-body.md
          # make the new release a draft instead of automatically publishing
          draft: true
          generateReleaseNotes: true
          # if the release already exists, leave its metadata alone
          omitBodyDuringUpdate: true
          omitNameDuringUpdate: true
          omitPrereleaseDuringUpdate: true
          # make the new release a pre-release
          prerelease: true
          # tag+commit creates a version tag for this release with the tag name at the commit ref
          # so the GitHub Release doesn't have to create the tag and assume it is on `main`
          tag: v${{ inputs.version }}
          commit: ${{ github.head_ref || github.ref_name }}
          # only update if the release is still a draft
          updateOnlyUnreleased: true

      - name: Upload release assets to S3
        id: upload_s3
        if: ${{ inputs.uploadReleaseAssets && matrix.os != env.OS_LINUX }}
        uses: shallwefootball/upload-s3-action@v1.3.3
        with:
          aws_key_id: ${{ secrets.AWS_S3_RELEASE_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_S3_RELEASE_SECRET_ACCESS_KEY}}
          aws_bucket: ${{ vars.AWS_S3_RELEASE_BUCKET_NAME }}
          source_dir: release/staged
          # runner.os is Windows or macOS
          destination_dir: ${{ vars.AWS_S3_RELEASE_DIRECTORY }}/${{ inputs.version}}/${{ runner.os }}

      - name: Print S3 upload result
        if: ${{ inputs.uploadReleaseAssets && matrix.os != env.OS_LINUX }}
        run: |
          echo "S3 upload object_key: ${{ steps.upload_s3.outputs.object_key }}; object_locations: ${{ steps.upload_s3.outputs.object_locations }}"

      - name: Checkout bump ref
        if: ${{ matrix.os == env.OS_LINUX && inputs.newVersionAfterPublishing != '' && inputs.bumpRef != '' && inputs.bumpRef != (github.head_ref || github.ref_name) }}
        uses: actions/checkout@v4
        with:
          clean: false
          ref: ${{ inputs.bumpRef }}

      - name: Bump repo versions
        if: ${{ matrix.os == env.OS_LINUX && inputs.newVersionAfterPublishing != '' }}
        uses: ./.github/actions/bump-versions-action
        with:
          newVersion: ${{ inputs.newVersionAfterPublishing }}

      # Enable tmate debugging of manually-triggered workflows if the input option was provided
      - name: Setup tmate session
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug_enabled }}
        uses: mxschmitt/action-tmate@v3
        with:
          limit-access-to-actor: true
